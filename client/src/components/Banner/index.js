import React, { useRef } from "react";
import { Suspense } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import {
  useGLTF,
  useTexture,
  Center,
  ContactShadows,
  Environment,
  OrbitControls,
} from "@react-three/drei";
import "./style.css";

function Vehicle(props) {
  const { scene } = useGLTF(
    "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/ambulance/model.gltf"
  );
  // <primitive /> merely throws an already existing threejs object into the scene.
  // You use it when you want to create an object imperatively, or when you get served one.
  // In this case THREE.GLTFLoader serves us a scene.
  return <primitive object={scene} {...props} />;
}

function Tree(props) {
  const { scene } = useGLTF(
    "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/low-poly-tree/model.gltf"
  );
  return <primitive object={scene} {...props} />;
}

function Heli(props) {
  const group = useRef();
  const fin = useRef();

  // Load the gltf model
  const { nodes, materials } = useGLTF(
    "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/helicopter/model.gltf"
  );

  // Load keyed textures
  const textures = useTexture({
    metalnessMap:
      "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/materials/gold/Metal007_1K_Metalness.jpg",
    map: "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/materials/gold/Metal007_1K_Color.jpg",
    normalMap:
      "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/materials/gold/Metal007_1K_Normal.jpg",
    roughnessMap:
      "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/materials/gold/Metal007_1K_Roughness.jpg",
  });

  useFrame((state, delta) => {
    // This function runs 60 times/second, it binds this component to the render-loop.
    // On unmount this subscription is cleaned up automatically.

    // Rotate fins
    const t = state.clock.getElapsedTime();
    fin.current.rotation.y += delta * 20;

    // Make it float
    group.current.rotation.z = Math.sin(t / 1.5) / 10;
    group.current.rotation.x = Math.cos(t / 2) / 10;
    group.current.rotation.y = Math.sin(t / 2) / 10;
    group.current.position.y = 0.5 + (1 + Math.sin(t / 1.5)) / 5;
  });

  // The JSX scene graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  // gltfjsx comes in handy when you want to alter the gltf without having
  // to traverse the model data. It is also immutable, so our helicopter could
  // be invoked multiple times, add <Heli position={[6, -0.2, -4]} />  in the <App />
  // component to see it. With a normal gltf this is not possible without cloning.

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.BackMotor.geometry}
        material={nodes.BackMotor.material}
        position={[-0.14, 1.14, -3.11]}
      />
      <mesh
        geometry={nodes.BackWingsContainer.geometry}
        material={nodes.BackWingsContainer.material}
        position={[-0.2, 1.14, -3.1]}
      />
      <mesh
        geometry={nodes.GlassGasket.geometry}
        material={materials.WindsheildGasket}
        position={[0.39, 1.08, 0.2]}
      />
      <mesh
        geometry={nodes.GlassGasketTwo.geometry}
        material={materials["WindsheildGasket.001"]}
        position={[0.44, 1.09, 0.51]}
      />
      <mesh
        geometry={nodes.EngineStrut.geometry}
        material={nodes.EngineStrut.material}
        position={[0.29, 3.06, -0.35]}
      />
      <mesh
        geometry={nodes.HelicopterBody001.geometry}
        material={nodes.HelicopterBody001.material}
        position={[1110.33, 0.72, -196.12]}
      />
      <mesh
        geometry={nodes.Plane001.geometry}
        material={nodes.Plane001.material}
        position={[-0.22, 1.51, -3.17]}
      />
      <mesh
        geometry={nodes.TopEngine.geometry}
        material={nodes.TopEngine.material}
        position={[0.25, 1.73, -0.56]}
      />
      <mesh
        geometry={nodes.HelicopterBackWings.geometry}
        material={nodes.HelicopterBackWings.material}
        position={[-0.23, 1.14, -3.09]}
      />
      <group position={[0.44, 1.08, 0.48]}>
        <mesh
          geometry={nodes.Sphere007.geometry}
          material={materials.Windsheild}
          material-transparent
          material-opacity={0.5}
        />
        <mesh
          geometry={nodes.Sphere007_1.geometry}
          material={materials.WindSheildDark}
          material-transparent
          material-opacity={0.5}
        />
      </group>
      <mesh
        geometry={nodes.StandPlane.geometry}
        material={materials.Stand}
        position={[-2183.61, 0.37, 385.46]}
      />
      <group position={[0.24, 1.09, -0.64]}>
        <mesh geometry={nodes.Sphere010.geometry}>
          <meshStandardMaterial metalness={1} {...textures} />
        </mesh>
        <mesh
          geometry={nodes.Sphere010_1.geometry}
          material={materials.Interior}
        />
      </group>
      <mesh
        ref={fin}
        geometry={nodes.TopFin.geometry}
        material={nodes.TopFin.material}
        position={[0.29, 2.34, -0.35]}
        rotation={[Math.PI, -0.53, Math.PI]}
      />
    </group>
  );
}

export default function BannerModel() {
  return (
    <Canvas className="canvas" dpr={[1, 2]} camera={{ position: [0, 2, 8] }}>
      <ambientLight intensity={0.2} />
      <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />
      <pointLight position={[-10, -10, -10]} />
      <Suspense fallback={null}>
        <Center alignTop>
          <Vehicle rotation={[0, Math.PI / 4, 0]} />
          <Tree position={[2, 0.5, 0]} />
          <Heli position={[4, -0.2, 0]} />
        </Center>
        <ContactShadows
          rotation-x={Math.PI / 2}
          opacity={0.5}
          width={10}
          height={10}
          blur={2}
          far={4}
        />
        <Environment files="https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/hdris/empty-wharehouse/empty_warehouse_01_1k.hdr" />
      </Suspense>
    </Canvas>
  );
}
